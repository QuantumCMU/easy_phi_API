diff --git a/easy_phi/__init__.py b/easy_phi/__init__.py
index 55169f6..b9098d6 100644
--- a/easy_phi/__init__.py
+++ b/easy_phi/__init__.py
@@ -3,3 +3,4 @@
 __version__ = VERSION = "0.1"
 __license__ = LICENSE = "GPL v3.0"
 __project__ = PROJECT = "easy_phi"
+__server_port__ = SERVER_PORT = 8888
diff --git a/easy_phi/app.py b/easy_phi/app.py
index d6ceedd..fb60159 100644
--- a/easy_phi/app.py
+++ b/easy_phi/app.py
@@ -1,93 +1,98 @@
+"""
+This file contains Web Application
+"""
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 
 import tornado.ioloop
 import tornado.web
 from datetime import date
+import easy_phi_API.easy_phi
 
-from tornado.options import define, options
-
-#TCP port for Http requests
-PORT = 8888
-
-"""
-VersionHandler
-
-Return Rack software verion and last release date
-"""
 class VersionHandler(tornado.web.RequestHandler):
+    """
+    Return Rack software verion and last release date
+    """
     def get(self):
-		
-        response = { 'version': '0.0.1',
-                     'last_build':  date.today().isoformat() }
+        response = {'version': easy_phi_API.easy_phi.VERSION,
+                     'last_build':  date.today().isoformat()}
         self.write(response)
 
-"""
-ModulesListHandler
+class ModulesListHandler(tornado.web.RequestHandler):
+    """
+    ModulesListHandler
 
-Return a list of modules currently connected to the Rack
-with their information 
+    Return a list of modules currently connected to the Rack
+    with their information
 
-Module information includes:
-	- Module ID
-	- Module Description
-	- Module Software version
-	- Current status: locked/unlocked
-	- List of supported SCPI commands
+    Module information includes:
+    - Module ID
+    - Module Description
+    - Module Software version
+    - Current status: locked/unlocked
+    - List of supported SCPI commands
 """
-class ModulesListHandler(tornado.web.RequestHandler):
     def get(self):
-        response = { 'module3' : 'module3_info',
-					 'module2' : 'module2_info',
-					 'module1' : 'module1_info'}
+        response = {'module3' : 'module3_info',
+                     'module2' : 'module2_info',
+                     'module1' : 'module1_info'}
         self.write(response)
 
-"""
-SelectModuleHandler
-
-Select the module, identified by ID passed as a URL parameter. 
-"""
 class SelectModuleHandler(tornado.web.RequestHandler):
+    "Select the module, identified by ID passed as a URL parameter."
     def post(self):
         #Parse request URL and derive moduleID [TBD]
-		
+
         #Check the status of selected module (must be unlocked) [TBD]
-		
+
         #Lock the module [TBD]
-		
+
         #Redirect user to a constructed Module specific web-page [TBD]
-        
-        response = { 'SelectModuleHandler' }
+
+        response = {'handler' : 'SelectModuleHandler'}
+        self.write(response)
+
+    def get(self):
+		#Debug purpose only
+
+        response = {'handler' : 'SelectModuleHandler'}
         self.write(response)
-"""
-SCPICommandHandler
 
-Transfer SCPI command to a module, specified by moduleID
-"""
 class SCPICommandHandler(tornado.web.RequestHandler):
+    "Transfer SCPI command to a module, specified by moduleID"
     def post(self):
         #Parse request URL and derive moduleID [TBD]
-		
-        #Transfer SCPI command to the module [TBD] 
-		
-        #Update web-page accordingle [TBD]    
-        response = { 'SCPICommandHandler' }
+
+        #Transfer SCPI command to the module [TBD]
+
+        #Update web-page accordingle [TBD]
+        response = {'handler' : 'SCPICommandHandler'}
+        self.write(response)
+
+    def get(self):
+		#Debug purpose only
+
+        response = {'handler' : 'SCPICommandHandler'}
         self.write(response)
-"""
-AdminConsoleHandler
 
-Redirect user to Admin Console web-page
-"""
 class AdminConsoleHandler(tornado.web.RequestHandler):
+    """Redirect user to Admin Console web-page"""
     def post(self):
-		
+
         #Redirect user to Admin Console web-page [TBD]
-        
-        response = { 'AdminConsoleHandler' }
+
+        response = {'handler' : 'AdminConsoleHandler'}
         self.write(response)
-  
+
+    def get(self):
+		#Debug purpose only
+
+        response = {'handler' : 'AdminConsoleHandler'}
+        self.write(response)
+
 #URL schemas to RequestHandler classes mapping
-application = tornado.web.Application([
+APPLICATION = tornado.web.Application([
+	(r"/", VersionHandler), #Default page
     (r"/version", VersionHandler),
     (r"/modules", ModulesListHandler),
     (r"/pick_module", SelectModuleHandler),
@@ -96,8 +101,8 @@ application = tornado.web.Application([
 ])
 
 if __name__ == '__main__':
-	#listed for HTTP requests on 8888 TCP port
-    application.listen(PORT)
+    #listen for HTTP requests on TCP port
+    APPLICATION.listen(easy_phi_API.easy_phi.SERVER_PORT)
     tornado.ioloop.IOLoop.current().start()
 
 
diff --git a/easy_phi/app.py~ b/easy_phi/app.py~
new file mode 100644
index 0000000..166f8db
--- /dev/null
+++ b/easy_phi/app.py~
@@ -0,0 +1,28 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+import tornado
+import tornado.ioloop
+import tornado.web
+
+from tornado.options import define, options
+
+class MainHandler(tornado.web.RequestHandler):
+    def get(self):
+	doGet()
+    def post(self):
+	doPost()
+
+application = tornado.web.Application([
+    (r"/", MainHandler),
+])
+
+if __name__ == '__main__':
+    application.listen(8888)
+    tornado.ioloop.IOLoop.current().start()
+
+def doGet():
+    self.write("Hello, world. Get")
+
+def doPost():
+    self.write("Hello, world. Post")
